#!/usr/bin/env node

/**
 * –°—Ç–∞—Ä—Ç–æ–≤—ã–π —Å–∫—Ä–∏–ø—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∏ –∑–∞–ø—É—Å–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞
 */

const { exec } = require('child_process');
const fs = require('fs');
const path = require('path');

// –¶–≤–µ—Ç–∞ –¥–ª—è –≤—ã–≤–æ–¥–∞
const colors = {
  reset: '\x1b[0m',
  red: '\x1b[31m',
  green: '\x1b[32m',
  yellow: '\x1b[33m',
  blue: '\x1b[34m',
  magenta: '\x1b[35m',
  cyan: '\x1b[36m',
  white: '\x1b[37m'
};

function log(message, color = 'white') {
  console.log(`${colors[color]}${message}${colors.reset}`);
}

function checkFileExists(filePath) {
  return fs.existsSync(path.join(__dirname, filePath));
}

function createEnvFile() {
  const envPath = path.join(__dirname, '.env');
  if (fs.existsSync(envPath)) {
    log('‚úÖ –§–∞–π–ª .env —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç', 'green');
    return true;
  }

  log('üìù –°–æ–∑–¥–∞–Ω–∏–µ —Ñ–∞–π–ª–∞ .env...', 'yellow');
  
  const envContent = `# –ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Å–µ—Ä–≤–µ—Ä–∞
PORT=5000
NODE_ENV=development

# –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
DB_HOST=localhost
DB_PORT=5432
DB_NAME=tours_db
DB_USER=postgres
DB_PASSWORD=password

# JWT
JWT_SECRET=your_jwt_secret_key_here_make_it_long_and_secure_for_production
JWT_EXPIRES_IN=7d

# SMTP –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ (–ù–ê–°–¢–†–û–ô–¢–ï –≠–¢–ò –ó–ù–ê–ß–ï–ù–ò–Ø!)
SMTP_HOST=smtp.gmail.com
SMTP_PORT=587
SMTP_USER=your-email@gmail.com
SMTP_PASS=your-app-password

# URL –∫–ª–∏–µ–Ω—Ç—Å–∫–æ–≥–æ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
CLIENT_URL=http://localhost:3000

# –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–∞–π–ª–æ–≤
UPLOAD_PATH=uploads
MAX_FILE_SIZE=5242880
`;

  try {
    fs.writeFileSync(envPath, envContent);
    log('‚úÖ –§–∞–π–ª .env —Å–æ–∑–¥–∞–Ω —É—Å–ø–µ—à–Ω–æ!', 'green');
    return true;
  } catch (error) {
    log(`‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è .env —Ñ–∞–π–ª–∞: ${error.message}`, 'red');
    return false;
  }
}

function checkDependencies() {
  log('üì¶ –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π...', 'blue');
  
  if (!checkFileExists('node_modules')) {
    log('‚ùå node_modules –Ω–µ –Ω–∞–π–¥–µ–Ω. –ó–∞–ø—É—Å–∫ npm install...', 'yellow');
    return new Promise((resolve) => {
      exec('npm install', { cwd: __dirname }, (error, stdout, stderr) => {
        if (error) {
          log(`‚ùå –û—à–∏–±–∫–∞ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π: ${error.message}`, 'red');
          resolve(false);
        } else {
          log('‚úÖ –ó–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã —É—Å–ø–µ—à–Ω–æ!', 'green');
          resolve(true);
        }
      });
    });
  } else {
    log('‚úÖ –ó–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –Ω–∞–π–¥–µ–Ω—ã', 'green');
    return Promise.resolve(true);
  }
}

function testDatabaseConnection() {
  log('üîå –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö...', 'blue');
  
  return new Promise((resolve) => {
    exec('node -e "require(\'./config/database\').authenticate().then(() => console.log(\'SUCCESS\')).catch(err => console.log(\'ERROR:\', err.message))"', 
      { cwd: __dirname }, 
      (error, stdout, stderr) => {
        if (stdout.includes('SUCCESS')) {
          log('‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö —É—Å–ø–µ—à–Ω–æ!', 'green');
          resolve(true);
        } else {
          log('‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö:', 'red');
          log(stderr || stdout, 'red');
          log('üí° –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ PostgreSQL –∑–∞–ø—É—â–µ–Ω –∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –≤ .env –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã', 'yellow');
          resolve(false);
        }
      }
    );
  });
}

function testSMTP() {
  log('üìß –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ SMTP (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)...', 'blue');
  
  return new Promise((resolve) => {
    exec('node test-smtp.js', { cwd: __dirname }, (error, stdout, stderr) => {
      if (stdout.includes('‚úÖ')) {
        log('‚úÖ SMTP –Ω–∞—Å—Ç—Ä–æ–µ–Ω –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ!', 'green');
        resolve(true);
      } else {
        log('‚ö†Ô∏è SMTP –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω –∏–ª–∏ —Ä–∞–±–æ—Ç–∞–µ—Ç —Å –æ—à–∏–±–∫–∞–º–∏:', 'yellow');
        log('üí° –≠—Ç–æ –Ω–µ –∫—Ä–∏—Ç–∏—á–Ω–æ –¥–ª—è –±–∞–∑–æ–≤–æ–π —Ä–∞–±–æ—Ç—ã –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è', 'yellow');
        resolve(true); // –ù–µ –±–ª–æ–∫–∏—Ä—É–µ–º –∑–∞–ø—É—Å–∫ –∏–∑-–∑–∞ SMTP
      }
    });
  });
}

function syncDatabase() {
  log('üóÑÔ∏è –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö...', 'blue');
  
  return new Promise((resolve) => {
    exec('node -e "require(\'./models\').sequelize.sync({alter: true}).then(() => console.log(\'SUCCESS\')).catch(err => console.log(\'ERROR:\', err.message))"', 
      { cwd: __dirname }, 
      (error, stdout, stderr) => {
        if (stdout.includes('SUCCESS')) {
          log('‚úÖ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞–Ω–∞!', 'green');
          resolve(true);
        } else {
          log('‚ùå –û—à–∏–±–∫–∞ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö:', 'red');
          log(stderr || stdout, 'red');
          resolve(false);
        }
      }
    );
  });
}

function startServer() {
  log('üöÄ –ó–∞–ø—É—Å–∫ —Å–µ—Ä–≤–µ—Ä–∞...', 'magenta');
  
  const server = exec('npm start', { cwd: __dirname });
  
  server.stdout.on('data', (data) => {
    process.stdout.write(data);
  });
  
  server.stderr.on('data', (data) => {
    process.stderr.write(data);
  });
  
  server.on('close', (code) => {
    log(`–°–µ—Ä–≤–µ—Ä –∑–∞–≤–µ—Ä—à–µ–Ω —Å –∫–æ–¥–æ–º ${code}`, code === 0 ? 'green' : 'red');
  });
}

async function main() {
  log('='.repeat(50), 'cyan');
  log('    TOURS SERVER - –ê–í–¢–û–ú–ê–¢–ò–ß–ï–°–ö–ê–Ø –ù–ê–°–¢–†–û–ô–ö–ê    ', 'cyan');
  log('='.repeat(50), 'cyan');
  
  // 1. –°–æ–∑–¥–∞–Ω–∏–µ .env —Ñ–∞–π–ª–∞
  if (!createEnvFile()) {
    process.exit(1);
  }
  
  // 2. –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π
  const depsOk = await checkDependencies();
  if (!depsOk) {
    process.exit(1);
  }
  
  // 3. –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
  const dbOk = await testDatabaseConnection();
  if (!dbOk) {
    log('‚ùå –û—Å—Ç–∞–Ω–æ–≤–∫–∞ –∏–∑-–∑–∞ –ø—Ä–æ–±–ª–µ–º —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö', 'red');
    log('üí° –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –≤ .env —Ñ–∞–π–ª–µ –∏ —É–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ PostgreSQL –∑–∞–ø—É—â–µ–Ω', 'yellow');
    process.exit(1);
  }
  
  // 4. –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
  const syncOk = await syncDatabase();
  if (!syncOk) {
    log('‚ùå –û—Å—Ç–∞–Ω–æ–≤–∫–∞ –∏–∑-–∑–∞ –ø—Ä–æ–±–ª–µ–º —Å —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–µ–π –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö', 'red');
    process.exit(1);
  }
  
  // 5. –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ SMTP (–Ω–µ –∫—Ä–∏—Ç–∏—á–Ω–æ)
  await testSMTP();
  
  // 6. –ó–∞–ø—É—Å–∫ —Å–µ—Ä–≤–µ—Ä–∞
  log('üéâ –í—Å–µ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø—Ä–æ–π–¥–µ–Ω—ã —É—Å–ø–µ—à–Ω–æ!', 'green');
  log('üìù –ù–µ –∑–∞–±—É–¥—å—Ç–µ –Ω–∞—Å—Ç—Ä–æ–∏—Ç—å SMTP –≤ .env —Ñ–∞–π–ª–µ –¥–ª—è —Ä–∞–±–æ—Ç—ã email', 'yellow');
  log('', 'white');
  
  startServer();
}

// –ó–∞–ø—É—Å–∫
main().catch(error => {
  log(`‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: ${error.message}`, 'red');
  process.exit(1);
}); 