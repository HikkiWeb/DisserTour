const multer = require('multer');
const path = require('path');
const fs = require('fs');
const config = require('../config/config');

// –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º Cloudinary —Å–µ—Ä–≤–∏—Å
const cloudinaryService = require('../services/cloudinaryService');

// –°–æ–∑–¥–∞–µ–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –¥–ª—è –∑–∞–≥—Ä—É–∑–æ–∫, –µ—Å–ª–∏ –æ–Ω–∞ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
const uploadDir = path.join(__dirname, '..', config.upload.path);
if (!fs.existsSync(uploadDir)) {
  fs.mkdirSync(uploadDir, { recursive: true });
}

// –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Ö—Ä–∞–Ω–∏–ª–∏—â–∞ –¥–ª—è —Ç—É—Ä–æ–≤
const tourLocalStorage = multer.diskStorage({
  destination: (req, file, cb) => {
    const dir = path.join(uploadDir, 'tours');
    
    console.log('üìÅ –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ø–∞–ø–∫–∏ –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è –¥–ª—è —Ç—É—Ä–æ–≤:', dir);
    
    if (!fs.existsSync(dir)) {
      console.log('üìÇ –°–æ–∑–¥–∞–Ω–∏–µ –ø–∞–ø–∫–∏ –¥–ª—è —Ç—É—Ä–æ–≤:', dir);
      fs.mkdirSync(dir, { recursive: true });
    }
    
    cb(null, dir);
  },
  filename: (req, file, cb) => {
    const uniqueSuffix = Date.now() + '-' + Math.round(Math.random() * 1E9);
    const ext = path.extname(file.originalname);
    const filename = file.fieldname + '-' + uniqueSuffix + ext;
    
    console.log('üìù –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∏–º–µ–Ω–∏ —Ñ–∞–π–ª–∞ —Ç—É—Ä–∞:', {
      originalname: file.originalname,
      fieldname: file.fieldname,
      filename: filename
    });
    
    cb(null, filename);
  },
});

// –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Ö—Ä–∞–Ω–∏–ª–∏—â–∞ –¥–ª—è –∞–≤–∞—Ç–∞—Ä–æ–≤
const avatarLocalStorage = multer.diskStorage({
  destination: (req, file, cb) => {
    const dir = path.join(uploadDir, 'avatars');
    
    console.log('üìÅ –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ø–∞–ø–∫–∏ –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è –¥–ª—è –∞–≤–∞—Ç–∞—Ä–æ–≤:', dir);
    
    if (!fs.existsSync(dir)) {
      console.log('üìÇ –°–æ–∑–¥–∞–Ω–∏–µ –ø–∞–ø–∫–∏ –¥–ª—è –∞–≤–∞—Ç–∞—Ä–æ–≤:', dir);
      fs.mkdirSync(dir, { recursive: true });
    }
    
    cb(null, dir);
  },
  filename: (req, file, cb) => {
    const uniqueSuffix = Date.now() + '-' + Math.round(Math.random() * 1E9);
    const ext = path.extname(file.originalname);
    const filename = file.fieldname + '-' + uniqueSuffix + ext;
    
    console.log('üìù –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∏–º–µ–Ω–∏ —Ñ–∞–π–ª–∞ –∞–≤–∞—Ç–∞—Ä–∞:', {
      originalname: file.originalname,
      fieldname: file.fieldname,
      filename: filename
    });
    
    cb(null, filename);
  },
});

// –§–∏–ª—å—Ç—Ä —Ñ–∞–π–ª–æ–≤
const fileFilter = (req, file, cb) => {
  const allowedTypes = ['image/jpeg', 'image/png', 'image/webp'];
  
  console.log('üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ñ–∞–π–ª–∞:', {
    originalname: file.originalname,
    mimetype: file.mimetype,
    size: file.size
  });
  
  if (allowedTypes.includes(file.mimetype)) {
    console.log('‚úÖ –§–∞–π–ª —Ä–∞–∑—Ä–µ—à–µ–Ω:', file.originalname);
    cb(null, true);
  } else {
    console.log('‚ùå –§–∞–π–ª –æ—Ç–∫–ª–æ–Ω–µ–Ω:', file.originalname, '- –Ω–µ–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–π —Ç–∏–ø:', file.mimetype);
    cb(new Error('–ù–µ–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–π —Ç–∏–ø —Ñ–∞–π–ª–∞. –†–∞–∑—Ä–µ—à–µ–Ω—ã —Ç–æ–ª—å–∫–æ JPEG, PNG –∏ WebP.'), false);
  }
};

// –í—ã–±–∏—Ä–∞–µ–º —Ö—Ä–∞–Ω–∏–ª–∏—â–µ –¥–ª—è —Ç—É—Ä–æ–≤
const getTourStorage = () => {
  if (config.nodeEnv === 'production' && process.env.CLOUDINARY_CLOUD_NAME) {
    console.log('‚òÅÔ∏è –ò—Å–ø–æ–ª—å–∑—É–µ–º Cloudinary –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è —Ç—É—Ä–æ–≤');
    return cloudinaryService.tourStorage;
  } else {
    console.log('üíæ –ò—Å–ø–æ–ª—å–∑—É–µ–º –ª–æ–∫–∞–ª—å–Ω–æ–µ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ –¥–ª—è —Ç—É—Ä–æ–≤');
    return tourLocalStorage;
  }
};

// –í—ã–±–∏—Ä–∞–µ–º —Ö—Ä–∞–Ω–∏–ª–∏—â–µ –¥–ª—è –∞–≤–∞—Ç–∞—Ä–æ–≤  
const getAvatarStorage = () => {
  if (config.nodeEnv === 'production' && process.env.CLOUDINARY_CLOUD_NAME) {
    console.log('‚òÅÔ∏è –ò—Å–ø–æ–ª—å–∑—É–µ–º Cloudinary –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –∞–≤–∞—Ç–∞—Ä–æ–≤');
    return cloudinaryService.avatarStorage;
  } else {
    console.log('üíæ –ò—Å–ø–æ–ª—å–∑—É–µ–º –ª–æ–∫–∞–ª—å–Ω–æ–µ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ –¥–ª—è –∞–≤–∞—Ç–∞—Ä–æ–≤');
    return avatarLocalStorage;
  }
};

// –ù–∞—Å—Ç—Ä–æ–π–∫–∞ multer –¥–ª—è —Ç—É—Ä–æ–≤
const uploadTours = multer({
  storage: getTourStorage(),
  fileFilter: fileFilter,
  limits: {
    fileSize: config.upload.maxFileSize, // 5MB
  },
});

// –ù–∞—Å—Ç—Ä–æ–π–∫–∞ multer –¥–ª—è –∞–≤–∞—Ç–∞—Ä–æ–≤
const uploadAvatars = multer({
  storage: avatarLocalStorage, // –í—Å–µ–≥–¥–∞ –∏—Å–ø–æ–ª—å–∑—É–µ–º –ª–æ–∫–∞–ª—å–Ω–æ–µ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ –¥–ª—è –∞–≤–∞—Ç–∞—Ä–æ–≤ –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ
  fileFilter: fileFilter,
  limits: {
    fileSize: config.upload.maxFileSize, // 5MB
  },
});

// –£—Å—Ç–∞—Ä–µ–≤—à–∏–π upload –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏ (–∏—Å–ø–æ–ª—å–∑—É–µ–º –¥–ª—è —Ç—É—Ä–æ–≤)
const upload = uploadTours;

// Middleware –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—à–∏–±–æ–∫ –∑–∞–≥—Ä—É–∑–∫–∏
const handleUploadError = (err, req, res, next) => {
  if (err instanceof multer.MulterError) {
    if (err.code === 'LIMIT_FILE_SIZE') {
      return res.status(400).json({
        status: 'error',
        message: '–†–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞ –ø—Ä–µ–≤—ã—à–∞–µ—Ç –¥–æ–ø—É—Å—Ç–∏–º—ã–π –ø—Ä–µ–¥–µ–ª',
      });
    }
    return res.status(400).json({
      status: 'error',
      message: err.message,
    });
  }
  
  if (err) {
    return res.status(400).json({
      status: 'error',
      message: err.message,
    });
  }
  
  next();
};

// Middleware –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è —Ñ–∞–π–ª–æ–≤
const deleteFile = async (filePath) => {
  try {
    if (config.nodeEnv === 'production' && process.env.CLOUDINARY_CLOUD_NAME) {
      // –£–¥–∞–ª—è–µ–º –∏–∑ Cloudinary
      await cloudinaryService.deleteFile(filePath);
    } else {
      // –£–¥–∞–ª—è–µ–º –ª–æ–∫–∞–ª—å–Ω—ã–π —Ñ–∞–π–ª
      // –ï—Å–ª–∏ –ø—É—Ç—å –Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è —Å /, —É–±–∏—Ä–∞–µ–º –µ–≥–æ –¥–ª—è –ø—Ä–∞–≤–∏–ª—å–Ω–æ–≥–æ –ø—É—Ç–∏ –∫ —Ñ–∞–π–ª—É
      const cleanPath = filePath.startsWith('/') ? filePath.substring(1) : filePath;
      const fullPath = path.join(__dirname, '..', cleanPath);
      if (fs.existsSync(fullPath)) {
        fs.unlinkSync(fullPath);
        console.log('üóëÔ∏è –õ–æ–∫–∞–ª—å–Ω—ã–π —Ñ–∞–π–ª —É–¥–∞–ª–µ–Ω:', fullPath);
      }
    }
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —Ñ–∞–π–ª–∞:', error);
  }
};

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è URL –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
const getImageUrl = (filePath, options = {}) => {
  if (!filePath) return null;
  
  if (config.nodeEnv === 'production' && process.env.CLOUDINARY_CLOUD_NAME) {
    // –í–æ–∑–≤—Ä–∞—â–∞–µ–º Cloudinary URL
    return cloudinaryService.getImageUrl(filePath, options);
  } else {
    // –í–æ–∑–≤—Ä–∞—â–∞–µ–º –ª–æ–∫–∞–ª—å–Ω—ã–π URL
    return filePath;
  }
};

module.exports = {
  upload, // –î–ª—è –æ–±—Ä–∞—Ç–Ω–æ–π —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏ (—Ç—É—Ä—ã)
  uploadTours,
  uploadAvatars,
  uploadTourImages: cloudinaryService.uploadTourImages,
  uploadAvatar: cloudinaryService.uploadAvatar,
  handleUploadError,
  deleteFile,
  getImageUrl,
}; 