const cloudinary = require('cloudinary').v2;
const { CloudinaryStorage } = require('multer-storage-cloudinary');
const multer = require('multer');

// –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è Cloudinary
const isCloudinaryConfigured = !!(
  process.env.CLOUDINARY_CLOUD_NAME && 
  process.env.CLOUDINARY_API_KEY && 
  process.env.CLOUDINARY_API_SECRET
);

console.log('‚òÅÔ∏è Cloudinary –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è:', {
  cloud_name: process.env.CLOUDINARY_CLOUD_NAME ? '‚úÖ –£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ' : '‚ùå –ù–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ',
  api_key: process.env.CLOUDINARY_API_KEY ? '‚úÖ –£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ' : '‚ùå –ù–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ',
  api_secret: process.env.CLOUDINARY_API_SECRET ? '‚úÖ –£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ' : '‚ùå –ù–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ',
  configured: isCloudinaryConfigured ? '‚úÖ –ì–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ' : '‚ùå –¢—Ä–µ–±—É–µ—Ç –Ω–∞—Å—Ç—Ä–æ–π–∫–∏'
});

if (!isCloudinaryConfigured) {
  console.log('‚ö†Ô∏è –í–ù–ò–ú–ê–ù–ò–ï: Cloudinary –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω! –ù–µ–∫–æ—Ç–æ—Ä—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ –º–æ–≥—É—Ç –Ω–µ —Ä–∞–±–æ—Ç–∞—Ç—å.');
  console.log('üìù –î–ª—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –¥–æ–±–∞–≤—å—Ç–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è:');
  console.log('   - CLOUDINARY_CLOUD_NAME');
  console.log('   - CLOUDINARY_API_KEY');
  console.log('   - CLOUDINARY_API_SECRET');
}

// –ù–∞—Å—Ç—Ä–æ–π–∫–∞ Cloudinary —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –µ—Å—Ç—å –≤—Å–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ
if (isCloudinaryConfigured) {
  cloudinary.config({
    cloud_name: process.env.CLOUDINARY_CLOUD_NAME,
    api_key: process.env.CLOUDINARY_API_KEY,
    api_secret: process.env.CLOUDINARY_API_SECRET,
  });
}

// –°–æ–∑–¥–∞–Ω–∏–µ —Ö—Ä–∞–Ω–∏–ª–∏—â–∞ –¥–ª—è —Ç—É—Ä–æ–≤ (—Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ Cloudinary –Ω–∞—Å—Ç—Ä–æ–µ–Ω)
let tourStorage = null;
let avatarStorage = null;

if (isCloudinaryConfigured) {
  tourStorage = new CloudinaryStorage({
    cloudinary: cloudinary,
    params: {
      folder: 'tours',
      allowed_formats: ['jpg', 'jpeg', 'png', 'webp'],
      transformation: [
        { width: 800, height: 600, crop: 'limit' },
        { quality: 'auto' }
      ],
    },
  });

  // –°–æ–∑–¥–∞–Ω–∏–µ —Ö—Ä–∞–Ω–∏–ª–∏—â–∞ –¥–ª—è –∞–≤–∞—Ç–∞—Ä–æ–≤
  avatarStorage = new CloudinaryStorage({
    cloudinary: cloudinary,
    params: {
      folder: 'avatars',
      allowed_formats: ['jpg', 'jpeg', 'png', 'webp'],
      transformation: [
        { width: 300, height: 300, crop: 'fill' },
        { quality: 'auto' }
      ],
    },
  });
}

// Multer –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ (—Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ Cloudinary –Ω–∞—Å—Ç—Ä–æ–µ–Ω)
let uploadTourImages = null;
let uploadAvatar = null;

if (isCloudinaryConfigured && tourStorage && avatarStorage) {
  // Multer –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –¥–ª—è —Ç—É—Ä–æ–≤
  uploadTourImages = multer({
    storage: tourStorage,
    limits: {
      fileSize: 5 * 1024 * 1024, // 5MB
    },
    fileFilter: (req, file, cb) => {
      const allowedTypes = ['image/jpeg', 'image/png', 'image/webp'];
      if (allowedTypes.includes(file.mimetype)) {
        cb(null, true);
      } else {
        cb(new Error('–ù–µ–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–π —Ç–∏–ø —Ñ–∞–π–ª–∞. –†–∞–∑—Ä–µ—à–µ–Ω—ã —Ç–æ–ª—å–∫–æ JPEG, PNG –∏ WebP.'), false);
      }
    },
  });

  // Multer –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –¥–ª—è –∞–≤–∞—Ç–∞—Ä–æ–≤
  uploadAvatar = multer({
    storage: avatarStorage,
    limits: {
      fileSize: 2 * 1024 * 1024, // 2MB
    },
    fileFilter: (req, file, cb) => {
      const allowedTypes = ['image/jpeg', 'image/png', 'image/webp'];
      if (allowedTypes.includes(file.mimetype)) {
        cb(null, true);
      } else {
        cb(new Error('–ù–µ–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–π —Ç–∏–ø —Ñ–∞–π–ª–∞. –†–∞–∑—Ä–µ—à–µ–Ω—ã —Ç–æ–ª—å–∫–æ JPEG, PNG –∏ WebP.'), false);
      }
    },
  });
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è —Ñ–∞–π–ª–∞ –∏–∑ Cloudinary
const deleteFile = async (publicId) => {
  try {
    if (!publicId) return;
    
    if (!isCloudinaryConfigured) {
      console.log('‚ö†Ô∏è Cloudinary –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º —É–¥–∞–ª–µ–Ω–∏–µ:', publicId);
      return { result: 'not_found', reason: 'cloudinary_not_configured' };
    }
    
    console.log('üóëÔ∏è –ü–æ–ø—ã—Ç–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –∏–∑ Cloudinary:', publicId);
    
    // –ò–∑–≤–ª–µ–∫–∞–µ–º public_id –∏–∑ URL –µ—Å–ª–∏ –ø–µ—Ä–µ–¥–∞–Ω–∞ –ø–æ–ª–Ω–∞—è —Å—Å—ã–ª–∫–∞
    let cloudinaryPublicId = publicId;
    if (publicId.includes('cloudinary.com')) {
      const urlParts = publicId.split('/');
      const folderIndex = urlParts.findIndex(part => part === 'upload') + 2;
      cloudinaryPublicId = urlParts.slice(folderIndex).join('/').split('.')[0];
    } else if (publicId.startsWith('/uploads/')) {
      // –û–±—Ä–∞–±–æ—Ç–∫–∞ –ª–æ–∫–∞–ª—å–Ω—ã—Ö –ø—É—Ç–µ–π —Ç–∏–ø–∞ /uploads/tours/filename.jpg
      const pathParts = publicId.split('/');
      const folderName = pathParts[2]; // tours –∏–ª–∏ avatars
      const fileName = pathParts[3];
      cloudinaryPublicId = `${folderName}/${fileName.split('.')[0]}`;
    }
    
    console.log('üóëÔ∏è –ò–∑–≤–ª–µ—á–µ–Ω–Ω—ã–π public_id:', cloudinaryPublicId);
    
    const result = await cloudinary.uploader.destroy(cloudinaryPublicId);
    console.log('‚úÖ –§–∞–π–ª —É–¥–∞–ª–µ–Ω –∏–∑ Cloudinary:', result);
    return result;
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —Ñ–∞–π–ª–∞ –∏–∑ Cloudinary:', error);
    throw error;
  }
};

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è URL –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
const getImageUrl = (publicId, options = {}) => {
  if (!publicId) return null;
  
  // –ï—Å–ª–∏ —ç—Ç–æ —É–∂–µ –ø–æ–ª–Ω—ã–π URL Cloudinary, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –∫–∞–∫ –µ—Å—Ç—å
  if (publicId.includes('cloudinary.com')) {
    return publicId;
  }
  
  if (!isCloudinaryConfigured) {
    console.log('‚ö†Ô∏è Cloudinary –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –∏—Å—Ö–æ–¥–Ω—ã–π –ø—É—Ç—å:', publicId);
    return publicId;
  }
  
  const defaultOptions = {
    width: 800,
    height: 600,
    crop: 'limit',
    quality: 'auto',
    fetch_format: 'auto',
    ...options
  };
  
  try {
    return cloudinary.url(publicId, defaultOptions);
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ Cloudinary URL:', error);
    return publicId;
  }
};

module.exports = {
  cloudinary,
  tourStorage,
  avatarStorage,
  uploadTourImages,
  uploadAvatar,
  deleteFile,
  getImageUrl,
}; 