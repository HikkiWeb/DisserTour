const jwt = require('jsonwebtoken');
const crypto = require('crypto');
const { User } = require('../models');
const { Op } = require('sequelize');
const sequelize = require('../config/database');
const config = require('../config/config');
const { sendEmail } = require('../services/emailService');
const bcrypt = require('bcryptjs');
const { deleteFile } = require('../middleware/upload');

class AuthController {
  // –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
  static async register(req, res, next) {
    try {
      const { email, password, firstName, lastName } = req.body;

      // –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
      const existingUser = await User.findByEmail(email);
      if (existingUser) {
        return res.status(400).json({
          status: 'error',
          message: '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å —Ç–∞–∫–∏–º email —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç',
        });
      }

      // –°–æ–∑–¥–∞–Ω–∏–µ —Ç–æ–∫–µ–Ω–∞ –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏
      const verificationToken = crypto.randomBytes(32).toString('hex');

      // –°–æ–∑–¥–∞–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
      const user = await User.create({
        email,
        password,
        firstName,
        lastName,
        verificationToken,
      });

      // –û—Ç–ø—Ä–∞–≤–∫–∞ email –¥–ª—è –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏
      await sendEmail(email, 'verification', verificationToken);

      res.status(201).json({
        status: 'success',
        message: '–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–∞! –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –≤–∞—à—É –ø–æ—á—Ç—É –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –∞–∫–∫–∞—É–Ω—Ç–∞.',
        data: {
          user: {
            id: user.id,
            email: user.email,
            firstName: user.firstName,
            lastName: user.lastName,
            role: user.role,
            isVerified: user.isVerified,
          },
        },
      });
    } catch (error) {
      next(error);
    }
  }

  // –í—Ö–æ–¥ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
  static async login(req, res, next) {
    try {
      const { email, password } = req.body;

      // –ü–æ–∏—Å–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
      const user = await User.findByEmail(email);
      if (!user) {
        return res.status(401).json({
          status: 'error',
          message: '–ù–µ–≤–µ—Ä–Ω—ã–π email –∏–ª–∏ –ø–∞—Ä–æ–ª—å',
        });
      }

      // –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–∞—Ä–æ–ª—è
      const isValidPassword = await user.validatePassword(password);
      if (!isValidPassword) {
        return res.status(401).json({
          status: 'error',
          message: '–ù–µ–≤–µ—Ä–Ω—ã–π email –∏–ª–∏ –ø–∞—Ä–æ–ª—å',
        });
      }

      // –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏
      if (!user.isVerified) {
        return res.status(403).json({
          status: 'error',
          message: '–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ –≤–∞—à email',
        });
      }

      // –°–æ–∑–¥–∞–Ω–∏–µ JWT —Ç–æ–∫–µ–Ω–∞
      const token = jwt.sign(
        { id: user.id },
        config.jwt.secret,
        { expiresIn: config.jwt.expiresIn }
      );

      res.json({
        status: 'success',
        data: {
          user: {
            id: user.id,
            email: user.email,
            firstName: user.firstName,
            lastName: user.lastName,
            role: user.role,
          },
          token,
        },
      });
    } catch (error) {
      next(error);
    }
  }

  // –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ email
  static async verifyEmail(req, res, next) {
    try {
      let { token } = req.params;
      
      console.log('üîç –ü–æ–ª—É—á–µ–Ω —Ç–æ–∫–µ–Ω –¥–ª—è –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏:', token);

      // –î–µ–∫–æ–¥–∏—Ä—É–µ–º —Ç–æ–∫–µ–Ω –∏–∑ URL (–Ω–∞ —Å–ª—É—á–∞–π –µ—Å–ª–∏ –æ–Ω –±—ã–ª –∑–∞–∫–æ–¥–∏—Ä–æ–≤–∞–Ω)
      try {
        token = decodeURIComponent(token);
        console.log('üìù –î–µ–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Ç–æ–∫–µ–Ω:', token);
      } catch (decodeError) {
        console.log('‚ö†Ô∏è –û—à–∏–±–∫–∞ –¥–µ–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏—è —Ç–æ–∫–µ–Ω–∞, –∏—Å–ø–æ–ª—å–∑—É–µ–º –∏—Å—Ö–æ–¥–Ω—ã–π');
      }

      if (!token || token.trim() === '') {
        console.log('‚ùå –ü—É—Å—Ç–æ–π —Ç–æ–∫–µ–Ω');
        return res.status(400).json({
          status: 'error',
          message: '–¢–æ–∫–µ–Ω –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏ –Ω–µ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω',
        });
      }

      const user = await User.findOne({
        where: { verificationToken: token },
      });

      console.log('üë§ –ù–∞–π–¥–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å:', user ? `${user.email} (ID: ${user.id})` : '–Ω–µ –Ω–∞–π–¥–µ–Ω');

      if (!user) {
        return res.status(400).json({
          status: 'error',
          message: '–ù–µ–¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω—ã–π —Ç–æ–∫–µ–Ω –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏',
        });
      }

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω –ª–∏ —É–∂–µ email
      if (user.isVerified) {
        console.log('‚úÖ Email —É–∂–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:', user.email);
        return res.json({
          status: 'success',
          message: 'Email —É–∂–µ –±—ã–ª –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω —Ä–∞–Ω–µ–µ',
        });
      }

      user.isVerified = true;
      user.verificationToken = null;
      await user.save();

      console.log('üéâ Email —É—Å–ø–µ—à–Ω–æ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:', user.email);

      res.json({
        status: 'success',
        message: 'Email —É—Å–ø–µ—à–Ω–æ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω',
      });
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–∏ email:', error);
      next(error);
    }
  }

  // –ó–∞–ø—Ä–æ—Å –Ω–∞ —Å–±—Ä–æ—Å –ø–∞—Ä–æ–ª—è
  static async forgotPassword(req, res, next) {
    try {
      const { email } = req.body;

      const user = await User.findByEmail(email);
      if (!user) {
        return res.status(404).json({
          status: 'error',
          message: '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω',
        });
      }

      // –°–æ–∑–¥–∞–Ω–∏–µ —Ç–æ–∫–µ–Ω–∞ –¥–ª—è —Å–±—Ä–æ—Å–∞ –ø–∞—Ä–æ–ª—è
      const resetToken = crypto.randomBytes(32).toString('hex');
      const resetExpires = new Date(Date.now() + 3600000); // 1 —á–∞—Å

      user.resetPasswordToken = resetToken;
      user.resetPasswordExpires = resetExpires;
      await user.save();

      // –û—Ç–ø—Ä–∞–≤–∫–∞ email –¥–ª—è —Å–±—Ä–æ—Å–∞ –ø–∞—Ä–æ–ª—è
      await sendEmail(email, 'resetPassword', resetToken);

      res.json({
        status: 'success',
        message: '–ò–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏ –ø–æ —Å–±—Ä–æ—Å—É –ø–∞—Ä–æ–ª—è –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã –Ω–∞ –≤–∞—à email',
      });
    } catch (error) {
      next(error);
    }
  }

  // –°–±—Ä–æ—Å –ø–∞—Ä–æ–ª—è
  static async resetPassword(req, res, next) {
    try {
      const { token, password } = req.body;

      const user = await User.findOne({
        where: {
          resetPasswordToken: token,
          resetPasswordExpires: { [Op.gt]: new Date() },
        },
      });

      if (!user) {
        return res.status(400).json({
          status: 'error',
          message: '–ù–µ–¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω—ã–π –∏–ª–∏ –∏—Å—Ç–µ–∫—à–∏–π —Ç–æ–∫–µ–Ω —Å–±—Ä–æ—Å–∞ –ø–∞—Ä–æ–ª—è',
        });
      }

      user.password = password;
      user.resetPasswordToken = null;
      user.resetPasswordExpires = null;
      await user.save();

      res.json({
        status: 'success',
        message: '–ü–∞—Ä–æ–ª—å —É—Å–ø–µ—à–Ω–æ –∏–∑–º–µ–Ω–µ–Ω',
      });
    } catch (error) {
      next(error);
    }
  }

  // –ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–µ–∫—É—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
  static async getCurrentUser(req, res, next) {
    try {
      const user = await User.findByPk(req.user.id, {
        attributes: { exclude: ['password', 'verificationToken', 'resetPasswordToken', 'resetPasswordExpires'] },
      });

      if (!user) {
        return res.status(404).json({
          status: 'error',
          message: '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω',
        });
      }

      res.json({
        status: 'success',
        data: { user },
      });
    } catch (error) {
      next(error);
    }
  }

  // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø—Ä–æ—Ñ–∏–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
  static async updateProfile(req, res, next) {
    try {
      const { firstName, lastName, phone, email } = req.body;
      const user = await User.findByPk(req.user.id);

      if (!user) {
        return res.status(404).json({
          status: 'error',
          message: '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω',
        });
      }

      if (firstName !== undefined) user.firstName = firstName;
      if (lastName !== undefined) user.lastName = lastName;
      if (phone !== undefined) user.phone = phone;
      if (email !== undefined) user.email = email;

      await user.save();

      res.json({
        status: 'success',
        data: {
          user: {
            id: user.id,
            email: user.email,
            firstName: user.firstName,
            lastName: user.lastName,
            phone: user.phone,
            role: user.role,
            avatar: user.avatar,
            isVerified: user.isVerified,
            createdAt: user.createdAt,
          },
        },
        message: '–ü—Ä–æ—Ñ–∏–ª—å —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω',
      });
    } catch (error) {
      next(error);
    }
  }

  // –ò–∑–º–µ–Ω–µ–Ω–∏–µ –ø–∞—Ä–æ–ª—è
  static async changePassword(req, res, next) {
    try {
      const { currentPassword, newPassword } = req.body;
      const user = await User.findByPk(req.user.id);

      const isValidPassword = await user.validatePassword(currentPassword);
      if (!isValidPassword) {
        return res.status(401).json({
          status: 'error',
          message: '–ù–µ–≤–µ—Ä–Ω—ã–π —Ç–µ–∫—É—â–∏–π –ø–∞—Ä–æ–ª—å',
        });
      }

      user.password = newPassword;
      await user.save();

      res.json({
        status: 'success',
        message: '–ü–∞—Ä–æ–ª—å —É—Å–ø–µ—à–Ω–æ –∏–∑–º–µ–Ω–µ–Ω',
      });
    } catch (error) {
      next(error);
    }
  }

  // –ó–∞–≥—Ä—É–∑–∫–∞ –∞–≤–∞—Ç–∞—Ä–∞
  static async uploadAvatar(req, res, next) {
    try {
      if (!req.file) {
        return res.status(400).json({
          status: 'error',
          message: '–§–∞–π–ª –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω',
        });
      }

      const user = await User.findByPk(req.user.id);
      
      // –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä—ã–π –∞–≤–∞—Ç–∞—Ä –µ—Å–ª–∏ –æ–Ω –µ—Å—Ç—å
      if (user.avatar) {
        await deleteFile(user.avatar);
      }

      // –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø—É—Ç—å –∫ –Ω–æ–≤–æ–º—É –∞–≤–∞—Ç–∞—Ä—É
      let avatarPath;
      if (config.nodeEnv === 'production') {
        // –í –ø—Ä–æ–¥–∞–∫—à–µ–Ω–µ –∏—Å–ø–æ–ª—å–∑—É–µ–º Cloudinary URL
        avatarPath = req.file.path;
      } else {
        // –í —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ –∏—Å–ø–æ–ª—å–∑—É–µ–º –ª–æ–∫–∞–ª—å–Ω—ã–π –ø—É—Ç—å
        avatarPath = `/uploads/avatars/${req.file.filename}`;
      }
      
      user.avatar = avatarPath;
      await user.save();

      res.json({
        status: 'success',
        data: {
          user: {
            id: user.id,
            email: user.email,
            firstName: user.firstName,
            lastName: user.lastName,
            phone: user.phone,
            role: user.role,
            avatar: user.avatar,
            isVerified: user.isVerified,
          },
        },
        message: '–ê–≤–∞—Ç–∞—Ä —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω',
      });
    } catch (error) {
      // –£–¥–∞–ª—è–µ–º –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã–π —Ñ–∞–π–ª –≤ —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏
      if (req.file) {
        if (config.nodeEnv === 'production') {
          await deleteFile(req.file.path);
        } else {
          await deleteFile(`uploads/avatars/${req.file.filename}`);
        }
      }
      next(error);
    }
  }

  // –ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
  static async getUserStats(req, res, next) {
    try {
      const userId = req.user.id;

      // –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–π
      const { Booking } = require('../models');
      const bookingStats = await Booking.findAll({
        where: { userId },
        attributes: [
          'status',
          [sequelize.fn('COUNT', sequelize.col('id')), 'count']
        ],
        group: ['status'],
        raw: true
      });

      // –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –æ—Ç–∑—ã–≤–æ–≤
      const { Review } = require('../models');
      const reviewStats = await Review.findAll({
        where: { userId },
        attributes: [
          [sequelize.fn('COUNT', sequelize.col('id')), 'totalReviews'],
          [sequelize.fn('AVG', sequelize.col('rating')), 'averageRating']
        ],
        raw: true
      });

      // –ü–æ–ª—É—á–∞–µ–º –æ–±—â—É—é –ø–æ—Ç—Ä–∞—á–µ–Ω–Ω—É—é —Å—É–º–º—É
      const totalSpent = await Booking.sum('totalPrice', {
        where: { 
          userId,
          status: 'confirmed'
        }
      });

      res.json({
        status: 'success',
        data: {
          bookings: bookingStats,
          reviews: reviewStats[0] || { totalReviews: 0, averageRating: 0 },
          totalSpent: totalSpent || 0
        }
      });
    } catch (error) {
      next(error);
    }
  }
}

module.exports = AuthController; 