const geminiService = require('../services/geminiService');
const { Tour } = require('../models');
const { Op } = require('sequelize');

class AIAssistantController {
  // –û—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ AI –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç—É
  async sendMessage(req, res) {
    try {
      console.log('üì® –ü–æ–ª—É—á–µ–Ω –∑–∞–ø—Ä–æ—Å –∫ AI:', req.body);
      
      const { message, chatHistory = [], userPreferences = {} } = req.body;
      const userId = req.user?.id;

      console.log('üë§ User ID:', userId);
      console.log('üí¨ Message:', message);
      console.log('üìö Chat History length:', chatHistory.length);

      if (!message || message.trim().length === 0) {
        console.log('‚ùå –ü—É—Å—Ç–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ');
        return res.status(400).json({
          status: 'error',
          message: '–°–æ–æ–±—â–µ–Ω–∏–µ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º'
        });
      }

      // –ü–æ–ª—É—á–∞–µ–º –¥–æ—Å—Ç—É–ø–Ω—ã–µ —Ç—É—Ä—ã –¥–ª—è –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞
      console.log('üîç –ó–∞–≥—Ä—É–∂–∞–µ–º —Ç—É—Ä—ã –∏–∑ –ë–î...');
      const availableTours = await Tour.findAll({
        attributes: ['id', 'title', 'description', 'price', 'region', 'duration', 'rating'],
        where: {
          isActive: true
        },
        limit: 20,
        order: [['rating', 'DESC'], ['createdAt', 'DESC']]
      });
      console.log('üìã –ù–∞–π–¥–µ–Ω–æ —Ç—É—Ä–æ–≤:', availableTours.length);

      // –°–æ–∑–¥–∞–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç –¥–ª—è AI
      console.log('üéØ –°–æ–∑–¥–∞–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç –¥–ª—è AI...');
      const context = geminiService.createTourismContext(userPreferences, availableTours);

      // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –æ—Ç–≤–µ—Ç
      console.log('ü§ñ –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å –∫ Gemini...');
      const aiResponse = await geminiService.generateResponse(message, context, chatHistory);
      console.log('‚úÖ –ü–æ–ª—É—á–µ–Ω –æ—Ç–≤–µ—Ç –æ—Ç Gemini:', aiResponse.substring(0, 100));

      // –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –∏–Ω—Ç–µ–Ω—Ç –¥–ª—è –≤–æ–∑–º–æ–∂–Ω—ã—Ö –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö –¥–µ–π—Å—Ç–≤–∏–π
      const intent = await geminiService.analyzeIntent(message);

      let additionalData = {};

      // –í –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –∏–Ω—Ç–µ–Ω—Ç–∞ –¥–æ–±–∞–≤–ª—è–µ–º –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é
      if (intent === 'tour_search') {
        // –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∏—â–µ—Ç —Ç—É—Ä—ã, –ø—Ä–µ–¥–ª–∞–≥–∞–µ–º –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã
        const searchTerms = message.toLowerCase();
        const suggestedTours = availableTours.filter(tour => 
          tour.title.toLowerCase().includes(searchTerms) ||
          tour.description.toLowerCase().includes(searchTerms) ||
          tour.region.toLowerCase().includes(searchTerms)
        ).slice(0, 3);

        additionalData.suggestedTours = suggestedTours;
      }

      // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –±—ã—Å—Ç—Ä—ã–µ –≤–æ–ø—Ä–æ—Å—ã –¥–ª—è —Å–ª–µ–¥—É—é—â–µ–≥–æ –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏—è
      console.log('‚ùì –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –±—ã—Å—Ç—Ä—ã–µ –≤–æ–ø—Ä–æ—Å—ã...');
      const quickQuestions = await geminiService.generateQuickQuestions(userPreferences);
      console.log('üìù –ë—ã—Å—Ç—Ä—ã–µ –≤–æ–ø—Ä–æ—Å—ã:', quickQuestions);

      console.log('üì§ –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Ç–≤–µ—Ç –∫–ª–∏–µ–Ω—Ç—É...');
      res.json({
        status: 'success',
        data: {
          response: aiResponse,
          intent,
          quickQuestions,
          ...additionalData
        }
      });
      console.log('‚úÖ –û—Ç–≤–µ—Ç —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω');

    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –≤ sendMessage:', error);
      console.error('‚ùå Stack trace:', error.stack);
      res.status(500).json({
        status: 'error',
        message: '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è',
        error: error.message
      });
    }
  }

  // –ü–æ–ª—É—á–∏—Ç—å –ø–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
  async getPersonalizedRecommendations(req, res) {
    try {
      const userId = req.user?.id;
      const { preferences = {} } = req.body;

      // –ü–æ–ª—É—á–∞–µ–º –ø—Ä–æ—Ñ–∏–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (–µ—Å–ª–∏ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω)
      let userProfile = {};
      if (userId) {
        const { User, Booking } = require('../models');
        const user = await User.findByPk(userId, {
          include: [{
            model: Booking,
            include: [Tour]
          }]
        });
        
        if (user) {
                     userProfile = {
             id: user.id,
             name: user.name,
             previousBookings: user.Bookings?.map(booking => ({
               tourTitle: booking.Tour?.title,
               region: booking.Tour?.region,
               rating: booking.rating
             })) || []
           };
        }
      }

      // –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –¥–æ—Å—Ç—É–ø–Ω—ã–µ —Ç—É—Ä—ã
      const availableTours = await Tour.findAll({
        where: {
          isActive: true
        },
        order: [['rating', 'DESC'], ['createdAt', 'DESC']]
      });

      // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ —Å –ø–æ–º–æ—â—å—é AI
      const recommendations = await geminiService.generatePersonalizedRecommendations(
        userProfile, 
        availableTours, 
        preferences
      );

      // –ü–æ–ª—É—á–∞–µ–º –¥–µ—Ç–∞–ª–∏ —Ä–µ–∫–æ–º–µ–Ω–¥–æ–≤–∞–Ω–Ω—ã—Ö —Ç—É—Ä–æ–≤
      if (recommendations.recommendations && recommendations.recommendations.length > 0) {
        const tourIds = recommendations.recommendations.map(rec => rec.tourId);
        const detailedTours = await Tour.findAll({
          where: {
            id: {
              [Op.in]: tourIds
            }
          }
        });

        // –û–±—ä–µ–¥–∏–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ —Ç—É—Ä–æ–≤ —Å —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è–º–∏ AI
        recommendations.recommendations = recommendations.recommendations.map(rec => {
          const tour = detailedTours.find(t => t.id.toString() === rec.tourId.toString());
          return {
            ...rec,
            tour: tour || null
          };
        }).filter(rec => rec.tour); // –£–±–∏—Ä–∞–µ–º —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –±–µ–∑ –Ω–∞–π–¥–µ–Ω–Ω—ã—Ö —Ç—É—Ä–æ–≤
      }

      res.json({
        status: 'success',
        data: recommendations
      });

    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –≤ getPersonalizedRecommendations:', error);
      res.status(500).json({
        status: 'error',
        message: '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π'
      });
    }
  }

  // –ü–æ–ª—É—á–∏—Ç—å –±—ã—Å—Ç—Ä—ã–µ –≤–æ–ø—Ä–æ—Å—ã –¥–ª—è –Ω–∞—á–∞–ª–∞ —Ä–∞–∑–≥–æ–≤–æ—Ä–∞
  async getQuickQuestions(req, res) {
    try {
      const { context = {} } = req.query;
      const userContext = typeof context === 'string' ? JSON.parse(context) : context;

      const questions = await geminiService.generateQuickQuestions(userContext);

      res.json({
        status: 'success',
        data: {
          questions
        }
      });

    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –≤ getQuickQuestions:', error);
      res.status(500).json({
        status: 'error',
        message: '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –±—ã—Å—Ç—Ä—ã—Ö –≤–æ–ø—Ä–æ—Å–æ–≤'
      });
    }
  }

  // –ê–Ω–∞–ª–∏–∑ –Ω–∞–º–µ—Ä–µ–Ω–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
  async analyzeIntent(req, res) {
    try {
      const { message } = req.body;

      if (!message) {
        return res.status(400).json({
          status: 'error',
          message: '–°–æ–æ–±—â–µ–Ω–∏–µ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ'
        });
      }

      const intent = await geminiService.analyzeIntent(message);

      res.json({
        status: 'success',
        data: {
          intent,
          message
        }
      });

    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –≤ analyzeIntent:', error);
      res.status(500).json({
        status: 'error',
        message: '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∞–Ω–∞–ª–∏–∑–µ –Ω–∞–º–µ—Ä–µ–Ω–∏–π'
      });
    }
  }

  // –ü–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å—Ç–∞—Ç—É—Å–µ AI —Å–µ—Ä–≤–∏—Å–∞
  async getStatus(req, res) {
    try {
      // –ü—Ä–æ—Å—Ç–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ —Ä–∞–±–æ—Ç–æ—Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç–∏ AI —Å–µ—Ä–≤–∏—Å–∞
      console.log('üîç –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å Gemini API...');
      
      const testResponse = await geminiService.generateResponse(
        '–ü—Ä–∏–≤–µ—Ç! –¢—ã —Ä–∞–±–æ—Ç–∞–µ—à—å?', 
        '–¢—ã —Ç—É—Ä–∏—Å—Ç–∏—á–µ—Å–∫–∏–π –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç –ø–æ –ö–∞–∑–∞—Ö—Å—Ç–∞–Ω—É. –û—Ç–≤–µ—Ç—å –∫—Ä–∞—Ç–∫–æ –Ω–∞ —Ä—É—Å—Å–∫–æ–º.', 
        []
      );

      console.log('‚úÖ Gemini API —Ä–∞–±–æ—Ç–∞–µ—Ç, –æ—Ç–≤–µ—Ç –ø–æ–ª—É—á–µ–Ω:', testResponse.substring(0, 100));

      res.json({
        status: 'success',
        data: {
          aiServiceActive: !!testResponse,
          model: 'gemini-2.0-flash',
          timestamp: new Date().toISOString(),
          testResponse: testResponse.substring(0, 100) + '...'
        }
      });

    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ Gemini API:', error.message);
      res.status(200).json({
        status: 'success',
        data: {
          aiServiceActive: false,
          error: error.message,
          model: 'gemini-2.0-flash',
          timestamp: new Date().toISOString()
        }
      });
    }
  }
}

module.exports = new AIAssistantController(); 