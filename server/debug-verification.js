/**
 * –°–∫—Ä–∏–ø—Ç –¥–ª—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏ –ø—Ä–æ–±–ª–µ–º —Å –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–µ–π email
 * –ó–∞–ø—É—Å–∫: node debug-verification.js [email]
 */

require('dotenv').config();
const { User } = require('./models');

async function debugVerification() {
  const email = process.argv[2];
  
  if (!email) {
    console.log('‚ùå –£–∫–∞–∂–∏—Ç–µ email –∞–¥—Ä–µ—Å:');
    console.log('   node debug-verification.js user@example.com');
    process.exit(1);
  }

  try {
    console.log('üîç –ü–æ–∏—Å–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å email:', email);
    
    const user = await User.findOne({ where: { email } });
    
    if (!user) {
      console.log('‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω');
      process.exit(1);
    }

    console.log('\nüë§ –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ:');
    console.log('ID:', user.id);
    console.log('Email:', user.email);
    console.log('–ò–º—è:', user.firstName, user.lastName);
    console.log('–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω:', user.isVerified ? '‚úÖ –î–∞' : '‚ùå –ù–µ—Ç');
    console.log('–¢–æ–∫–µ–Ω –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏:', user.verificationToken || '–æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç');
    console.log('–†–æ–ª—å:', user.role);
    console.log('–°–æ–∑–¥–∞–Ω:', user.createdAt);

    if (!user.isVerified && user.verificationToken) {
      console.log('\nüîó –°—Å—ã–ª–∫–∞ –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è:');
      console.log(`http://localhost:3000/verify-email?token=${user.verificationToken}`);
      
      console.log('\nüõ†Ô∏è –ö–æ–º–∞–Ω–¥—ã –¥–ª—è –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è:');
      console.log('–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:');
      console.log(`node -e "const {User} = require('./models'); User.update({isVerified: true, verificationToken: null}, {where: {email: '${email}'}}).then(() => console.log('–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω')).catch(console.error)"`);
    }

    if (user.isVerified) {
      console.log('\n‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω, –º–æ–∂–Ω–æ –≤–æ–π—Ç–∏ –≤ —Å–∏—Å—Ç–µ–º—É');
    }

  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞:', error.message);
  } finally {
    process.exit(0);
  }
}

debugVerification(); 