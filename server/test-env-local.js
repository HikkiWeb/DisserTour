console.log('üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ Cloudinary –Ω–∞ –ª–æ–∫–∞–ª—å–Ω–æ–π –º–∞—à–∏–Ω–µ...\n');

// –ó–∞–≥—Ä—É–∂–∞–µ–º .env —Ñ–∞–π–ª
const path = require('path');
require('dotenv').config({ path: path.join(__dirname, '../.env') });

console.log('üìã –ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è:');
console.log('NODE_ENV:', process.env.NODE_ENV || 'undefined');
console.log('CLOUDINARY_CLOUD_NAME:', process.env.CLOUDINARY_CLOUD_NAME ? `‚úÖ ${process.env.CLOUDINARY_CLOUD_NAME}` : '‚ùå –ù–ï –£–°–¢–ê–ù–û–í–õ–ï–ù–û');
console.log('CLOUDINARY_API_KEY:', process.env.CLOUDINARY_API_KEY ? `‚úÖ ${process.env.CLOUDINARY_API_KEY.substring(0, 8)}...` : '‚ùå –ù–ï –£–°–¢–ê–ù–û–í–õ–ï–ù–û');
console.log('CLOUDINARY_API_SECRET:', process.env.CLOUDINARY_API_SECRET ? `‚úÖ ${process.env.CLOUDINARY_API_SECRET.substring(0, 8)}...` : '‚ùå –ù–ï –£–°–¢–ê–ù–û–í–õ–ï–ù–û');

console.log('\nüîß –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è:');
const config = require('./config/config');
console.log('config.nodeEnv:', config.nodeEnv);

console.log('\n‚òÅÔ∏è –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ Cloudinary —Å–µ—Ä–≤–∏—Å–∞:');
try {
  // –ó–∞–≥—Ä—É–∂–∞–µ–º —Å–µ—Ä–≤–∏—Å
  const cloudinaryService = require('./services/cloudinaryService');
  
  console.log('\nüîç –ü—Ä–æ–≤–µ—Ä–∫–∞ storage –æ–±—ä–µ–∫—Ç–æ–≤:');
  console.log('tourStorage:', cloudinaryService.tourStorage ? '‚úÖ –°–æ–∑–¥–∞–Ω' : '‚ùå –ù–µ —Å–æ–∑–¥–∞–Ω');
  console.log('avatarStorage:', cloudinaryService.avatarStorage ? '‚úÖ –°–æ–∑–¥–∞–Ω' : '‚ùå –ù–µ —Å–æ–∑–¥–∞–Ω');
  console.log('uploadTourImages:', cloudinaryService.uploadTourImages ? '‚úÖ –°–æ–∑–¥–∞–Ω' : '‚ùå –ù–µ —Å–æ–∑–¥–∞–Ω');
  console.log('uploadAvatar:', cloudinaryService.uploadAvatar ? '‚úÖ –°–æ–∑–¥–∞–Ω' : '‚ùå –ù–µ —Å–æ–∑–¥–∞–Ω');
  
  console.log('\nüîó –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ URL:');
  const testPaths = [
    'test-image.jpg',
    'tours/test-tour.jpg',
    '/uploads/avatars/test-avatar.jpg'
  ];
  
  testPaths.forEach(testPath => {
    try {
      const url = cloudinaryService.getImageUrl(testPath);
      console.log(`"${testPath}" -> "${url}"`);
    } catch (error) {
      console.log(`"${testPath}" -> ‚ùå ${error.message}`);
    }
  });

} catch (error) {
  console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ cloudinaryService:', error.message);
}

console.log('\n‚öôÔ∏è –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ middleware upload:');
try {
  const uploadMiddleware = require('./middleware/upload');
  
  // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞–∫–∏–µ storage –±—É–¥—É—Ç –≤—ã–±—Ä–∞–Ω—ã
  console.log('\n–ü—Ä–∏ NODE_ENV =', config.nodeEnv, ':');
  if (config.nodeEnv === 'production') {
    console.log('- –ë—É–¥–µ—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è Cloudinary storage (–µ—Å–ª–∏ –Ω–∞—Å—Ç—Ä–æ–µ–Ω)');
  } else {
    console.log('- –ë—É–¥–µ—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –ª–æ–∫–∞–ª—å–Ω–æ–µ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ');
  }
  
} catch (error) {
  console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ upload middleware:', error.message);
}

console.log('\n‚úÖ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ'); 