const crypto = require('crypto');
const { User } = require('./models');
const emailService = require('./services/emailService');

async function testForgotPassword() {
  console.log('üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª–∞ "–ó–∞–±—ã–ª–∏ –ø–∞—Ä–æ–ª—å"...\n');

  try {
    // 1. –ù–∞–π–¥–µ–º –ø–µ—Ä–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
    const user = await User.findOne({ 
      where: { isVerified: true },
      order: [['createdAt', 'DESC']]
    });

    if (!user) {
      console.log('‚ùå –ù–µ—Ç –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è');
      console.log('üí° –°–æ–∑–¥–∞–π—Ç–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —á–µ—Ä–µ–∑ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é –∏ –ø–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ email');
      return;
    }

    console.log(`üë§ –¢–µ—Å—Ç–∏—Ä—É–µ–º —Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º: ${user.email}`);

    // 2. –°–æ–∑–¥–∞–µ–º —Ç–æ–∫–µ–Ω —Å–±—Ä–æ—Å–∞ –ø–∞—Ä–æ–ª—è
    const resetToken = crypto.randomBytes(32).toString('hex');
    const resetExpires = new Date(Date.now() + 3600000); // 1 —á–∞—Å

    user.resetPasswordToken = resetToken;
    user.resetPasswordExpires = resetExpires;
    await user.save();

    console.log(`üîë –°–æ–∑–¥–∞–Ω —Ç–æ–∫–µ–Ω —Å–±—Ä–æ—Å–∞: ${resetToken.substring(0, 10)}...`);
    console.log(`‚è∞ –°—Ä–æ–∫ –¥–µ–π—Å—Ç–≤–∏—è –¥–æ: ${resetExpires.toLocaleString()}`);

    // 3. –û—Ç–ø—Ä–∞–≤–ª—è–µ–º email
    await emailService.sendEmail({
      to: user.email,
      template: 'resetPassword',
      data: resetToken,
    });
    console.log('üìß Email –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω —É—Å–ø–µ—à–Ω–æ!');

    // 4. –°–∏–º—É–ª–∏—Ä—É–µ–º –ø—Ä–æ–≤–µ—Ä–∫—É —Ç–æ–∫–µ–Ω–∞
    const foundUser = await User.findOne({
      where: {
        resetPasswordToken: resetToken,
        resetPasswordExpires: { $gt: new Date() }
      }
    });

    if (foundUser) {
      console.log('‚úÖ –¢–æ–∫–µ–Ω –Ω–∞–π–¥–µ–Ω –∏ –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª–µ–Ω');
    } else {
      console.log('‚ùå –¢–æ–∫–µ–Ω –Ω–µ –Ω–∞–π–¥–µ–Ω –∏–ª–∏ –∏—Å—Ç–µ–∫');
    }

    // 5. –í—ã–≤–æ–¥–∏–º —Å—Å—ã–ª–∫—É –¥–ª—è —Ä—É—á–Ω–æ–≥–æ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
    const clientUrl = process.env.CLIENT_URL || 'http://localhost:3000';
    const resetUrl = `${clientUrl}/reset-password?token=${resetToken}`;
    
    console.log('\nüîó –°—Å—ã–ª–∫–∞ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è:');
    console.log(resetUrl);
    
    console.log('\nüìã –ß—Ç–æ –¥–∞–ª—å—à–µ:');
    console.log('1. –ü–µ—Ä–µ–π–¥–∏—Ç–µ –ø–æ —Å—Å—ã–ª–∫–µ –≤—ã—à–µ');
    console.log('2. –í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–π –ø–∞—Ä–æ–ª—å');
    console.log('3. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –≤–æ–π—Ç–∏ —Å –Ω–æ–≤—ã–º –ø–∞—Ä–æ–ª–µ–º');

    // 6. –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤–æ–∑–º–æ–∂–Ω—ã–µ –ø—Ä–æ–±–ª–µ–º—ã
    console.log('\nüîç –î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞:');
    
    // –ü—Ä–æ–≤–µ—Ä–∫–∞ SMTP –Ω–∞—Å—Ç—Ä–æ–µ–∫
    const smtpConfigured = process.env.SMTP_USER && process.env.SMTP_PASS;
    console.log(`üì® SMTP –Ω–∞—Å—Ç—Ä–æ–µ–Ω: ${smtpConfigured ? '‚úÖ' : '‚ùå'}`);
    
    if (!smtpConfigured) {
      console.log('‚ö†Ô∏è  –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ SMTP –≤ .env —Ñ–∞–π–ª–µ');
    }

    // –ü—Ä–æ–≤–µ—Ä–∫–∞ CLIENT_URL
    console.log(`üåê CLIENT_URL: ${process.env.CLIENT_URL || '–ù–ï –£–°–¢–ê–ù–û–í–õ–ï–ù'}`);
    
    if (!process.env.CLIENT_URL) {
      console.log('‚ö†Ô∏è  –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ CLIENT_URL –≤ .env —Ñ–∞–π–ª–µ');
    }

  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏:', error.message);
    
    if (error.message.includes('SMTP')) {
      console.log('\nüí° –í–æ–∑–º–æ–∂–Ω—ã–µ –ø—Ä–∏—á–∏–Ω—ã –ø—Ä–æ–±–ª–µ–º —Å SMTP:');
      console.log('- –ù–µ–≤–µ—Ä–Ω—ã–µ SMTP_USER –∏–ª–∏ SMTP_PASS');
      console.log('- SMTP_HOST –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω');
      console.log('- –ë–ª–æ–∫–∏—Ä–æ–≤–∫–∞ "–º–µ–Ω–µ–µ –±–µ–∑–æ–ø–∞—Å–Ω—ã—Ö –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–π"');
      console.log('- –ù—É–∂–µ–Ω –ø–∞—Ä–æ–ª—å –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è –≤–º–µ—Å—Ç–æ –æ–±—ã—á–Ω–æ–≥–æ –ø–∞—Ä–æ–ª—è');
    }
  }
}

// –ü—Ä–æ–≤–µ—Ä—è–µ–º –º–æ–¥–µ–ª—å User –Ω–∞ –Ω–∞–ª–∏—á–∏–µ –Ω—É–∂–Ω—ã—Ö –ø–æ–ª–µ–π
async function checkUserModel() {
  console.log('üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –º–æ–¥–µ–ª–∏ User...\n');
  
  try {
    const user = await User.findOne();
    if (user) {
      const hasResetToken = user.hasOwnProperty('resetPasswordToken');
      const hasResetExpires = user.hasOwnProperty('resetPasswordExpires');
      
      console.log(`resetPasswordToken –ø–æ–ª–µ: ${hasResetToken ? '‚úÖ' : '‚ùå'}`);
      console.log(`resetPasswordExpires –ø–æ–ª–µ: ${hasResetExpires ? '‚úÖ' : '‚ùå'}`);
      
      if (!hasResetToken || !hasResetExpires) {
        console.log('\n‚ö†Ô∏è  –ú–æ–¥–µ–ª—å User –Ω–µ —Å–æ–¥–µ—Ä–∂–∏—Ç –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –ø–æ–ª—è –¥–ª—è —Å–±—Ä–æ—Å–∞ –ø–∞—Ä–æ–ª—è');
        console.log('–î–æ–±–∞–≤—å—Ç–µ –≤ –º–æ–¥–µ–ª—å User:');
        console.log('- resetPasswordToken: STRING');
        console.log('- resetPasswordExpires: DATE');
      }
    }
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –º–æ–¥–µ–ª–∏:', error.message);
  }
}

// –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
if (require.main === module) {
  console.log('üîß –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª–∞ "–ó–∞–±—ã–ª–∏ –ø–∞—Ä–æ–ª—å"\n');
  
  checkUserModel()
    .then(() => testForgotPassword())
    .then(() => {
      console.log('\n‚úÖ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ');
      process.exit(0);
    })
    .catch((error) => {
      console.error('\n‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞:', error);
      process.exit(1);
    });
}

module.exports = { testForgotPassword, checkUserModel }; 