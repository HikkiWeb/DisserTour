import React, { useEffect, useState } from 'react';
import { useSearchParams, useNavigate, Link as RouterLink } from 'react-router-dom';
import {
  Container,
  Paper,
  Box,
  Typography,
  Alert,
  CircularProgress,
  Button,
} from '@mui/material';
import { CheckCircleOutline, ErrorOutline } from '@mui/icons-material';

const VerifyEmailPage: React.FC = () => {
  const [searchParams] = useSearchParams();
  const navigate = useNavigate();
  const [status, setStatus] = useState<'loading' | 'success' | 'error'>('loading');
  const [message, setMessage] = useState<string>('');
  const [isProcessing, setIsProcessing] = useState<boolean>(false);
  
  const token = searchParams.get('token');

  useEffect(() => {
    const verifyEmail = async () => {
      if (!token) {
        setStatus('error');
        setMessage('–¢–æ–∫–µ–Ω –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ URL');
        return;
      }

      // –ó–∞—â–∏—Ç–∞ –æ—Ç –¥–≤–æ–π–Ω—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤ –≤ React Strict Mode
      if (isProcessing) {
        return;
      }
      setIsProcessing(true);

      console.log('üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç–æ–∫–µ–Ω–∞:', token);

      try {
        // –ö–æ–¥–∏—Ä—É–µ–º —Ç–æ–∫–µ–Ω –¥–ª—è –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏ URL
        const encodedToken = encodeURIComponent(token);
        const apiUrl = process.env.REACT_APP_API_URL || 'http://localhost:5000/api';
        const url = `${apiUrl}/auth/verify-email/${encodedToken}`;
        
        console.log('üì° –û—Ç–ø—Ä–∞–≤–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –Ω–∞:', url);

        const response = await fetch(url, {
          method: 'GET',
          headers: {
            'Content-Type': 'application/json',
          },
        });

        const data = await response.json();
        console.log('üìù –û—Ç–≤–µ—Ç —Å–µ—Ä–≤–µ—Ä–∞:', { status: response.status, data });

        if (response.ok && data.status === 'success') {
          setStatus('success');
          setMessage(data.message || 'Email —É—Å–ø–µ—à–Ω–æ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω!');
          
          // –ü–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª—è–µ–º –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É –≤—Ö–æ–¥–∞ —á–µ—Ä–µ–∑ 3 —Å–µ–∫—É–Ω–¥—ã
          setTimeout(() => {
            navigate('/login', { 
              state: { 
                message: 'Email –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω! –¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ –≤–æ–π—Ç–∏ –≤ —Å–∏—Å—Ç–µ–º—É.' 
              } 
            });
          }, 3000);
        } else {
          setStatus('error');
          setMessage(data.message || `–û—à–∏–±–∫–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è email (${response.status})`);
        }
      } catch (error: any) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–∏ email:', error);
        setStatus('error');
        setMessage(`–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–∏ email: ${error.message}`);
      } finally {
        setIsProcessing(false);
      }
    };

    // –î–æ–±–∞–≤–ª—è–µ–º –Ω–µ–±–æ–ª—å—à—É—é –∑–∞–¥–µ—Ä–∂–∫—É —á—Ç–æ–±—ã –∏–∑–±–µ–∂–∞—Ç—å –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏—è –≤ React Strict Mode
    const timeoutId = setTimeout(verifyEmail, 100);
    
    return () => clearTimeout(timeoutId);
  }, [token, navigate, isProcessing]);

  return (
    <Container component="main" maxWidth="sm">
      <Box
        sx={{
          marginTop: 8,
          display: 'flex',
          flexDirection: 'column',
          alignItems: 'center',
        }}
      >
        <Paper
          elevation={3}
          sx={{
            padding: 4,
            display: 'flex',
            flexDirection: 'column',
            alignItems: 'center',
            width: '100%',
            textAlign: 'center',
          }}
        >
          <Typography component="h1" variant="h4" gutterBottom>
            –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ Email
          </Typography>

          {status === 'loading' && (
            <Box sx={{ display: 'flex', flexDirection: 'column', alignItems: 'center', gap: 2 }}>
              <CircularProgress size={60} />
              <Typography variant="body1">
                –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –≤–∞—à–µ–≥–æ email –∞–¥—Ä–µ—Å–∞...
              </Typography>
            </Box>
          )}

          {status === 'success' && (
            <Box sx={{ display: 'flex', flexDirection: 'column', alignItems: 'center', gap: 2 }}>
              <CheckCircleOutline sx={{ fontSize: 80, color: 'success.main' }} />
              <Alert severity="success" sx={{ width: '100%' }}>
                {message}
              </Alert>
              <Typography variant="body2" color="text.secondary">
                –í—ã –±—É–¥–µ—Ç–µ –ø–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª–µ–Ω—ã –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É –≤—Ö–æ–¥–∞ —á–µ—Ä–µ–∑ –Ω–µ—Å–∫–æ–ª—å–∫–æ —Å–µ–∫—É–Ω–¥...
              </Typography>
              <Button
                component={RouterLink}
                to="/login"
                variant="contained"
                sx={{ mt: 2 }}
              >
                –í–æ–π—Ç–∏ —Å–µ–π—á–∞—Å
              </Button>
            </Box>
          )}

          {status === 'error' && (
            <Box sx={{ display: 'flex', flexDirection: 'column', alignItems: 'center', gap: 2 }}>
              <ErrorOutline sx={{ fontSize: 80, color: 'error.main' }} />
              <Alert severity="error" sx={{ width: '100%' }}>
                {message}
              </Alert>
              <Typography variant="body2" color="text.secondary" sx={{ mt: 2 }}>
                –í–æ–∑–º–æ–∂–Ω—ã–µ –ø—Ä–∏—á–∏–Ω—ã:
              </Typography>
              <Typography variant="body2" color="text.secondary" component="ul" sx={{ textAlign: 'left' }}>
                <li>–°—Å—ã–ª–∫–∞ —É—Å—Ç–∞—Ä–µ–ª–∞ –∏–ª–∏ –Ω–µ–¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–∞</li>
                <li>Email —É–∂–µ –±—ã–ª –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω —Ä–∞–Ω–µ–µ</li>
                <li>–ü—Ä–æ–±–ª–µ–º—ã —Å –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ–º –∫ —Å–µ—Ä–≤–µ—Ä—É</li>
              </Typography>
              <Box sx={{ display: 'flex', gap: 2, mt: 3 }}>
                <Button
                  component={RouterLink}
                  to="/login"
                  variant="outlined"
                >
                  –ü–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å –≤–æ–π—Ç–∏
                </Button>
                <Button
                  component={RouterLink}
                  to="/register"
                  variant="contained"
                >
                  –ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è —Å–Ω–æ–≤–∞
                </Button>
              </Box>
            </Box>
          )}
        </Paper>
      </Box>
    </Container>
  );
};

export default VerifyEmailPage; 