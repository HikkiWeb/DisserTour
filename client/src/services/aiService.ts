import { apiService } from './api';

export interface ChatMessage {
  role: 'user' | 'assistant';
  content: string;
  timestamp: Date;
}

export interface QuickQuestion {
  text: string;
  icon?: string;
}

export interface AIResponse {
  response: string;
  intent?: string;
  quickQuestions?: string[];
  suggestedTours?: any[];
}

export interface PersonalizedRecommendation {
  tourId: string;
  reason: string;
  matchScore: number;
  tour?: any;
}

export interface RecommendationsResponse {
  recommendations: PersonalizedRecommendation[];
}

class AIService {
  // –û—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ AI –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç—É
  async sendMessage(
    message: string, 
    chatHistory: ChatMessage[] = [], 
    userPreferences: Record<string, any> = {}
  ): Promise<AIResponse> {
    try {
      console.log('üöÄ –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –∫ AI:', { message, chatHistory: chatHistory.length, userPreferences });
      const response = await apiService.sendAIMessage({
        message,
        chatHistory,
        userPreferences
      });
      console.log('üì® –ü–æ–ª—É—á–µ–Ω –æ—Ç–≤–µ—Ç –æ—Ç API:', response);
      return response.data || response;
    } catch (error: any) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –≤ aiService.sendMessage:', error);
      throw new Error(error.response?.data?.message || error.message || '–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è');
    }
  }

  // –ü–æ–ª—É—á–∏—Ç—å –ø–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
  async getPersonalizedRecommendations(preferences: Record<string, any> = {}): Promise<RecommendationsResponse> {
    try {
      const response = await apiService.getAIRecommendations(preferences);
      return response.data;
    } catch (error: any) {
      throw new Error(error.response?.data?.message || '–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π');
    }
  }

  // –ü–æ–ª—É—á–∏—Ç—å –±—ã—Å—Ç—Ä—ã–µ –≤–æ–ø—Ä–æ—Å—ã
  async getQuickQuestions(context: Record<string, any> = {}): Promise<string[]> {
    try {
      const response = await apiService.getAIQuickQuestions(context);
      return response.data.questions;
    } catch (error: any) {
      throw new Error(error.response?.data?.message || '–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –±—ã—Å—Ç—Ä—ã—Ö –≤–æ–ø—Ä–æ—Å–æ–≤');
    }
  }

  // –ê–Ω–∞–ª–∏–∑ –Ω–∞–º–µ—Ä–µ–Ω–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
  async analyzeIntent(message: string): Promise<string> {
    try {
      const response = await apiService.analyzeAIIntent(message);
      return response.data.intent;
    } catch (error: any) {
      throw new Error(error.response?.data?.message || '–û—à–∏–±–∫–∞ –ø—Ä–∏ –∞–Ω–∞–ª–∏–∑–µ –Ω–∞–º–µ—Ä–µ–Ω–∏–π');
    }
  }

  // –ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Å—Ç–∞—Ç—É—Å AI —Å–µ—Ä–≤–∏—Å–∞
  async getStatus(): Promise<{ aiServiceActive: boolean; timestamp: string; error?: string }> {
    try {
      const response = await apiService.getAIStatus();
      return response.data;
    } catch (error: any) {
      return {
        aiServiceActive: false,
        timestamp: new Date().toISOString(),
        error: error.response?.data?.message || '–°–µ—Ä–≤–∏—Å –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω'
      };
    }
  }
}

export default new AIService(); 