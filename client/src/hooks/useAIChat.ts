import { useState, useCallback, useRef, useEffect } from 'react';
import aiService, { ChatMessage, AIResponse } from '../services/aiService';
import { useAuth } from '../context/AuthContext';

interface UseChatState {
  messages: ChatMessage[];
  isLoading: boolean;
  isTyping: boolean;
  error: string | null;
  quickQuestions: string[];
  isServiceAvailable: boolean;
}

interface UseChatActions {
  sendMessage: (message: string) => Promise<void>;
  clearChat: () => void;
  refreshQuickQuestions: () => Promise<void>;
  checkServiceStatus: () => Promise<void>;
  addUserMessage: (message: string) => void;
}

export function useAIChat(): UseChatState & UseChatActions {
  const { user } = useAuth();
  const [messages, setMessages] = useState<ChatMessage[]>([]);
  const [isLoading, setIsLoading] = useState(false);
  const [isTyping, setIsTyping] = useState(false);
  const [error, setError] = useState<string | null>(null);
  const [quickQuestions, setQuickQuestions] = useState<string[]>([]);
  const [isServiceAvailable, setIsServiceAvailable] = useState(true);
  
  // –¢–∞–π–º–µ—Ä –¥–ª—è —ç—Ñ—Ñ–µ–∫—Ç–∞ –ø–µ—á–∞—Ç–∞–Ω–∏—è
  const typingTimer = useRef<NodeJS.Timeout | null>(null);
  // –§–ª–∞–≥ –¥–ª—è –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–µ–Ω–∏—è –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤
  const isRefreshingQuestions = useRef(false);
  const isCheckingStatus = useRef(false);

  // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
  const addUserMessage = useCallback((content: string) => {
    const userMessage: ChatMessage = {
      role: 'user',
      content,
      timestamp: new Date()
    };
    setMessages(prev => [...prev, userMessage]);
  }, []);

  // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –æ—Ç–≤–µ—Ç–∞ –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–∞ —Å —ç—Ñ—Ñ–µ–∫—Ç–æ–º –ø–µ—á–∞—Ç–∞–Ω–∏—è
  const addAssistantMessage = useCallback((content: string) => {
    setIsTyping(true);
    
    // –ò–º–∏—Ç–∏—Ä—É–µ–º –∑–∞–¥–µ—Ä–∂–∫—É –ø–µ—á–∞—Ç–∞–Ω–∏—è
    const delay = Math.min(content.length * 20, 2000); // –ú–∞–∫—Å–∏–º—É–º 2 —Å–µ–∫—É–Ω–¥—ã
    
    typingTimer.current = setTimeout(() => {
      const assistantMessage: ChatMessage = {
        role: 'assistant',
        content,
        timestamp: new Date()
      };
      setMessages(prev => [...prev, assistantMessage]);
      setIsTyping(false);
    }, delay);
  }, []);

  // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –±—ã—Å—Ç—Ä—ã—Ö –≤–æ–ø—Ä–æ—Å–æ–≤ —Å –∑–∞—â–∏—Ç–æ–π –æ—Ç —á–∞—Å—Ç—ã—Ö –≤—ã–∑–æ–≤–æ–≤
  const refreshQuickQuestions = useCallback(async () => {
    // –ü—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–∞–µ–º –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã–µ –æ–¥–Ω–æ–≤—Ä–µ–º–µ–Ω–Ω—ã–µ –∑–∞–ø—Ä–æ—Å—ã
    if (isRefreshingQuestions.current) {
      return;
    }
    
    isRefreshingQuestions.current = true;
    
    try {
      const context = {
        currentPage: window.location.pathname,
        isAuthenticated: !!user,
        chatLength: messages.length
      };
      
      const questions = await aiService.getQuickQuestions(context);
      setQuickQuestions(questions);
    } catch (err) {
      console.error('–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –±—ã—Å—Ç—Ä—ã—Ö –≤–æ–ø—Ä–æ—Å–æ–≤:', err);
      // –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–µ –≤–æ–ø—Ä–æ—Å—ã –ø—Ä–∏ –æ—à–∏–±–∫–µ
      setQuickQuestions([
        "üèîÔ∏è –õ—É—á—à–∏–µ –ø—Ä–∏—Ä–æ–¥–Ω—ã–µ —Ç—É—Ä—ã",
        "üèõÔ∏è –ö—É–ª—å—Ç—É—Ä–Ω—ã–µ –¥–æ—Å—Ç–æ–ø—Ä–∏–º–µ—á–∞—Ç–µ–ª—å–Ω–æ—Å—Ç–∏",
        "üí∞ –ë—é–¥–∂–µ—Ç–Ω—ã–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã —Ç—É—Ä–æ–≤",
        "üó∫Ô∏è –ü–æ–º–æ—â—å –≤ –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–∏ –º–∞—Ä—à—Ä—É—Ç–∞"
      ]);
    } finally {
      isRefreshingQuestions.current = false;
    }
  }, [user, messages.length]);

  // –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ AI —Å–µ—Ä–≤–∏—Å–∞ —Å –∑–∞—â–∏—Ç–æ–π –æ—Ç —á–∞—Å—Ç—ã—Ö –≤—ã–∑–æ–≤–æ–≤
  const checkServiceStatus = useCallback(async () => {
    // –ü—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–∞–µ–º –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã–µ –æ–¥–Ω–æ–≤—Ä–µ–º–µ–Ω–Ω—ã–µ –∑–∞–ø—Ä–æ—Å—ã
    if (isCheckingStatus.current) {
      return;
    }
    
    isCheckingStatus.current = true;
    
    try {
      const status = await aiService.getStatus();
      setIsServiceAvailable(status.aiServiceActive);
      
      if (!status.aiServiceActive) {
        setError('AI –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω');
      }
    } catch (err) {
      setIsServiceAvailable(false);
      console.error('–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å—Ç–∞—Ç—É—Å–∞ AI:', err);
    } finally {
      isCheckingStatus.current = false;
    }
  }, []);

  // –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è AI –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç—É
  const sendMessage = useCallback(async (message: string) => {
    if (!message.trim() || isLoading) return;

    console.log('üéØ useAIChat.sendMessage –≤—ã–∑–≤–∞–Ω:', message);
    setError(null);
    setIsLoading(true);

    try {
      // –î–æ–±–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
      console.log('‚ûï –î–æ–±–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è');
      addUserMessage(message);

      // –ü–æ–ª—É—á–∞–µ–º –ø—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
      const userPreferences = {
        userId: user?.id,
        userName: user ? `${user.firstName || ''} ${user.lastName || ''}`.trim() : undefined,
        isAuthenticated: !!user,
        currentPage: window.location.pathname
      };
      console.log('üë§ –ü—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:', userPreferences);

      // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å –∫ AI
      console.log('ü§ñ –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫ AI —Å–µ—Ä–≤–∏—Å—É...');
      const response: AIResponse = await aiService.sendMessage(
        message,
        messages,
        userPreferences
      );
      console.log('‚úÖ –ü–æ–ª—É—á–µ–Ω –æ—Ç–≤–µ—Ç –æ—Ç AI:', response);

      // –î–æ–±–∞–≤–ª—è–µ–º –æ—Ç–≤–µ—Ç –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–∞
      console.log('üí¨ –î–æ–±–∞–≤–ª—è–µ–º –æ—Ç–≤–µ—Ç –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–∞');
      addAssistantMessage(response.response);

      // –û–±–Ω–æ–≤–ª—è–µ–º –±—ã—Å—Ç—Ä—ã–µ –≤–æ–ø—Ä–æ—Å—ã, –µ—Å–ª–∏ –ø–æ–ª—É—á–∏–ª–∏ –Ω–æ–≤—ã–µ
      if (response.quickQuestions && response.quickQuestions.length > 0) {
        console.log('‚ùì –û–±–Ω–æ–≤–ª—è–µ–º –±—ã—Å—Ç—Ä—ã–µ –≤–æ–ø—Ä–æ—Å—ã:', response.quickQuestions);
        setQuickQuestions(response.quickQuestions);
      }

    } catch (err: any) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –≤ useAIChat.sendMessage:', err);
      setError(err.message || '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è');
    } finally {
      setIsLoading(false);
    }
  }, [messages, user, isLoading, addUserMessage, addAssistantMessage]);

  // –û—á–∏—Å—Ç–∫–∞ —á–∞—Ç–∞
  const clearChat = useCallback(() => {
    setMessages([]);
    setError(null);
    setIsTyping(false);
    if (typingTimer.current) {
      clearTimeout(typingTimer.current);
    }
    refreshQuickQuestions();
  }, [refreshQuickQuestions]);

  // –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ —Å–µ—Ä–≤–∏—Å–∞ –ø—Ä–∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ —Å –∑–∞–¥–µ—Ä–∂–∫–æ–π
  useEffect(() => {
    // –ó–∞–¥–µ—Ä–∂–∫–∞ –¥–ª—è –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–µ–Ω–∏—è –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤ –ø—Ä–∏ –±—ã—Å—Ç—Ä—ã—Ö —Ä–µ-—Ä–µ–Ω–¥–µ—Ä–∞—Ö
    const timer = setTimeout(() => {
      checkServiceStatus();
      refreshQuickQuestions();
    }, 100);
    
    return () => clearTimeout(timer);
  }, []); // –£–±–∏—Ä–∞–µ–º –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏, —á—Ç–æ–±—ã —ç—Ñ—Ñ–µ–∫—Ç –≤—ã–ø–æ–ª–Ω—è–ª—Å—è —Ç–æ–ª—å–∫–æ –æ–¥–∏–Ω —Ä–∞–∑

  // –û—á–∏—Å—Ç–∫–∞ —Ç–∞–π–º–µ—Ä–∞ –ø—Ä–∏ —Ä–∞–∑–º–æ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏
  useEffect(() => {
    return () => {
      if (typingTimer.current) {
        clearTimeout(typingTimer.current);
      }
    };
  }, []);

  return {
    // –°–æ—Å—Ç–æ—è–Ω–∏–µ
    messages,
    isLoading,
    isTyping,
    error,
    quickQuestions,
    isServiceAvailable,
    
    // –î–µ–π—Å—Ç–≤–∏—è
    sendMessage,
    clearChat,
    refreshQuickQuestions,
    checkServiceStatus,
    addUserMessage
  };
} 